// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package sc_misc_api

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type MiscService interface {
	ColumnOmnibus(ctx context.Context, request *ColumnOmnibusRequest) (r *ColumnOmnibusResponse, err error)

	RichColumnPage(ctx context.Context, request *RichColumnPageRequest) (r *RichColumnPageResponse, err error)

	ColumnQueryById(ctx context.Context, request *ColumnQueryByIdRequest) (r *ColumnQueryByIdResponse, err error)

	ColumnQuoteQueryByColumnId(ctx context.Context, request *ColumnQuoteQueryByColumnIdRequest) (r *ColumnQuoteQueryByColumnIdResponse, err error)

	EditorLogin(ctx context.Context, request *EditorLoginRequest) (r *EditorLoginResponse, err error)

	ReaderLogin(ctx context.Context, request *ReaderLoginRequest) (r *ReaderLoginResponse, err error)

	ReaderQueryById(ctx context.Context, request *ReaderQueryByIdRequest) (r *ReaderQueryByIdResponse, err error)

	PaymentQueryById(ctx context.Context, request *PaymentQueryByIdRequest) (r *PaymentQueryByIdResponse, err error)

	PaymentPrepare(ctx context.Context, request *PaymentPrepareRequest) (r *PaymentPrepareResponse, err error)

	PaymentCreate(ctx context.Context, request *PaymentCreateRequest) (r *PaymentCreateResponse, err error)

	PaymentPaidCallback(ctx context.Context, request *PaymentPaidCallbackRequest) (r *PaymentPaidCallbackResponse, err error)

	PaymentPublishMq(ctx context.Context, request *PaymentPublishMqRequest) (r *PaymentPublishMqResponse, err error)
}

type MiscServiceClient struct {
	c thrift.TClient
}

func NewMiscServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MiscServiceClient {
	return &MiscServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMiscServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MiscServiceClient {
	return &MiscServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMiscServiceClient(c thrift.TClient) *MiscServiceClient {
	return &MiscServiceClient{
		c: c,
	}
}

func (p *MiscServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MiscServiceClient) ColumnOmnibus(ctx context.Context, request *ColumnOmnibusRequest) (r *ColumnOmnibusResponse, err error) {
	var _args MiscServiceColumnOmnibusArgs
	_args.Request = request
	var _result MiscServiceColumnOmnibusResult
	if err = p.Client_().Call(ctx, "ColumnOmnibus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) RichColumnPage(ctx context.Context, request *RichColumnPageRequest) (r *RichColumnPageResponse, err error) {
	var _args MiscServiceRichColumnPageArgs
	_args.Request = request
	var _result MiscServiceRichColumnPageResult
	if err = p.Client_().Call(ctx, "RichColumnPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) ColumnQueryById(ctx context.Context, request *ColumnQueryByIdRequest) (r *ColumnQueryByIdResponse, err error) {
	var _args MiscServiceColumnQueryByIdArgs
	_args.Request = request
	var _result MiscServiceColumnQueryByIdResult
	if err = p.Client_().Call(ctx, "ColumnQueryById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) ColumnQuoteQueryByColumnId(ctx context.Context, request *ColumnQuoteQueryByColumnIdRequest) (r *ColumnQuoteQueryByColumnIdResponse, err error) {
	var _args MiscServiceColumnQuoteQueryByColumnIdArgs
	_args.Request = request
	var _result MiscServiceColumnQuoteQueryByColumnIdResult
	if err = p.Client_().Call(ctx, "ColumnQuoteQueryByColumnId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) EditorLogin(ctx context.Context, request *EditorLoginRequest) (r *EditorLoginResponse, err error) {
	var _args MiscServiceEditorLoginArgs
	_args.Request = request
	var _result MiscServiceEditorLoginResult
	if err = p.Client_().Call(ctx, "EditorLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) ReaderLogin(ctx context.Context, request *ReaderLoginRequest) (r *ReaderLoginResponse, err error) {
	var _args MiscServiceReaderLoginArgs
	_args.Request = request
	var _result MiscServiceReaderLoginResult
	if err = p.Client_().Call(ctx, "ReaderLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) ReaderQueryById(ctx context.Context, request *ReaderQueryByIdRequest) (r *ReaderQueryByIdResponse, err error) {
	var _args MiscServiceReaderQueryByIdArgs
	_args.Request = request
	var _result MiscServiceReaderQueryByIdResult
	if err = p.Client_().Call(ctx, "ReaderQueryById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) PaymentQueryById(ctx context.Context, request *PaymentQueryByIdRequest) (r *PaymentQueryByIdResponse, err error) {
	var _args MiscServicePaymentQueryByIdArgs
	_args.Request = request
	var _result MiscServicePaymentQueryByIdResult
	if err = p.Client_().Call(ctx, "PaymentQueryById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) PaymentPrepare(ctx context.Context, request *PaymentPrepareRequest) (r *PaymentPrepareResponse, err error) {
	var _args MiscServicePaymentPrepareArgs
	_args.Request = request
	var _result MiscServicePaymentPrepareResult
	if err = p.Client_().Call(ctx, "PaymentPrepare", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) PaymentCreate(ctx context.Context, request *PaymentCreateRequest) (r *PaymentCreateResponse, err error) {
	var _args MiscServicePaymentCreateArgs
	_args.Request = request
	var _result MiscServicePaymentCreateResult
	if err = p.Client_().Call(ctx, "PaymentCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) PaymentPaidCallback(ctx context.Context, request *PaymentPaidCallbackRequest) (r *PaymentPaidCallbackResponse, err error) {
	var _args MiscServicePaymentPaidCallbackArgs
	_args.Request = request
	var _result MiscServicePaymentPaidCallbackResult
	if err = p.Client_().Call(ctx, "PaymentPaidCallback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) PaymentPublishMq(ctx context.Context, request *PaymentPublishMqRequest) (r *PaymentPublishMqResponse, err error) {
	var _args MiscServicePaymentPublishMqArgs
	_args.Request = request
	var _result MiscServicePaymentPublishMqResult
	if err = p.Client_().Call(ctx, "PaymentPublishMq", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MiscServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MiscService
}

func (p *MiscServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MiscServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MiscServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMiscServiceProcessor(handler MiscService) *MiscServiceProcessor {
	self := &MiscServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ColumnOmnibus", &miscServiceProcessorColumnOmnibus{handler: handler})
	self.AddToProcessorMap("RichColumnPage", &miscServiceProcessorRichColumnPage{handler: handler})
	self.AddToProcessorMap("ColumnQueryById", &miscServiceProcessorColumnQueryById{handler: handler})
	self.AddToProcessorMap("ColumnQuoteQueryByColumnId", &miscServiceProcessorColumnQuoteQueryByColumnId{handler: handler})
	self.AddToProcessorMap("EditorLogin", &miscServiceProcessorEditorLogin{handler: handler})
	self.AddToProcessorMap("ReaderLogin", &miscServiceProcessorReaderLogin{handler: handler})
	self.AddToProcessorMap("ReaderQueryById", &miscServiceProcessorReaderQueryById{handler: handler})
	self.AddToProcessorMap("PaymentQueryById", &miscServiceProcessorPaymentQueryById{handler: handler})
	self.AddToProcessorMap("PaymentPrepare", &miscServiceProcessorPaymentPrepare{handler: handler})
	self.AddToProcessorMap("PaymentCreate", &miscServiceProcessorPaymentCreate{handler: handler})
	self.AddToProcessorMap("PaymentPaidCallback", &miscServiceProcessorPaymentPaidCallback{handler: handler})
	self.AddToProcessorMap("PaymentPublishMq", &miscServiceProcessorPaymentPublishMq{handler: handler})
	return self
}
func (p *MiscServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type miscServiceProcessorColumnOmnibus struct {
	handler MiscService
}

func (p *miscServiceProcessorColumnOmnibus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceColumnOmnibusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ColumnOmnibus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceColumnOmnibusResult{}
	var retval *ColumnOmnibusResponse
	if retval, err2 = p.handler.ColumnOmnibus(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ColumnOmnibus: "+err2.Error())
		oprot.WriteMessageBegin("ColumnOmnibus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ColumnOmnibus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorRichColumnPage struct {
	handler MiscService
}

func (p *miscServiceProcessorRichColumnPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceRichColumnPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RichColumnPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceRichColumnPageResult{}
	var retval *RichColumnPageResponse
	if retval, err2 = p.handler.RichColumnPage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RichColumnPage: "+err2.Error())
		oprot.WriteMessageBegin("RichColumnPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RichColumnPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorColumnQueryById struct {
	handler MiscService
}

func (p *miscServiceProcessorColumnQueryById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceColumnQueryByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ColumnQueryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceColumnQueryByIdResult{}
	var retval *ColumnQueryByIdResponse
	if retval, err2 = p.handler.ColumnQueryById(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ColumnQueryById: "+err2.Error())
		oprot.WriteMessageBegin("ColumnQueryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ColumnQueryById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorColumnQuoteQueryByColumnId struct {
	handler MiscService
}

func (p *miscServiceProcessorColumnQuoteQueryByColumnId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceColumnQuoteQueryByColumnIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ColumnQuoteQueryByColumnId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceColumnQuoteQueryByColumnIdResult{}
	var retval *ColumnQuoteQueryByColumnIdResponse
	if retval, err2 = p.handler.ColumnQuoteQueryByColumnId(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ColumnQuoteQueryByColumnId: "+err2.Error())
		oprot.WriteMessageBegin("ColumnQuoteQueryByColumnId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ColumnQuoteQueryByColumnId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorEditorLogin struct {
	handler MiscService
}

func (p *miscServiceProcessorEditorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceEditorLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EditorLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceEditorLoginResult{}
	var retval *EditorLoginResponse
	if retval, err2 = p.handler.EditorLogin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EditorLogin: "+err2.Error())
		oprot.WriteMessageBegin("EditorLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EditorLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorReaderLogin struct {
	handler MiscService
}

func (p *miscServiceProcessorReaderLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceReaderLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReaderLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceReaderLoginResult{}
	var retval *ReaderLoginResponse
	if retval, err2 = p.handler.ReaderLogin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReaderLogin: "+err2.Error())
		oprot.WriteMessageBegin("ReaderLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReaderLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorReaderQueryById struct {
	handler MiscService
}

func (p *miscServiceProcessorReaderQueryById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceReaderQueryByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReaderQueryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceReaderQueryByIdResult{}
	var retval *ReaderQueryByIdResponse
	if retval, err2 = p.handler.ReaderQueryById(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReaderQueryById: "+err2.Error())
		oprot.WriteMessageBegin("ReaderQueryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReaderQueryById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorPaymentQueryById struct {
	handler MiscService
}

func (p *miscServiceProcessorPaymentQueryById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServicePaymentQueryByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PaymentQueryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServicePaymentQueryByIdResult{}
	var retval *PaymentQueryByIdResponse
	if retval, err2 = p.handler.PaymentQueryById(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PaymentQueryById: "+err2.Error())
		oprot.WriteMessageBegin("PaymentQueryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PaymentQueryById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorPaymentPrepare struct {
	handler MiscService
}

func (p *miscServiceProcessorPaymentPrepare) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServicePaymentPrepareArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PaymentPrepare", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServicePaymentPrepareResult{}
	var retval *PaymentPrepareResponse
	if retval, err2 = p.handler.PaymentPrepare(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PaymentPrepare: "+err2.Error())
		oprot.WriteMessageBegin("PaymentPrepare", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PaymentPrepare", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorPaymentCreate struct {
	handler MiscService
}

func (p *miscServiceProcessorPaymentCreate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServicePaymentCreateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PaymentCreate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServicePaymentCreateResult{}
	var retval *PaymentCreateResponse
	if retval, err2 = p.handler.PaymentCreate(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PaymentCreate: "+err2.Error())
		oprot.WriteMessageBegin("PaymentCreate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PaymentCreate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorPaymentPaidCallback struct {
	handler MiscService
}

func (p *miscServiceProcessorPaymentPaidCallback) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServicePaymentPaidCallbackArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PaymentPaidCallback", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServicePaymentPaidCallbackResult{}
	var retval *PaymentPaidCallbackResponse
	if retval, err2 = p.handler.PaymentPaidCallback(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PaymentPaidCallback: "+err2.Error())
		oprot.WriteMessageBegin("PaymentPaidCallback", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PaymentPaidCallback", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorPaymentPublishMq struct {
	handler MiscService
}

func (p *miscServiceProcessorPaymentPublishMq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServicePaymentPublishMqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PaymentPublishMq", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServicePaymentPublishMqResult{}
	var retval *PaymentPublishMqResponse
	if retval, err2 = p.handler.PaymentPublishMq(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PaymentPublishMq: "+err2.Error())
		oprot.WriteMessageBegin("PaymentPublishMq", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PaymentPublishMq", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MiscServiceColumnOmnibusArgs struct {
	Request *ColumnOmnibusRequest `thrift:"request,1" frugal:"1,default,ColumnOmnibusRequest" json:"request"`
}

func NewMiscServiceColumnOmnibusArgs() *MiscServiceColumnOmnibusArgs {
	return &MiscServiceColumnOmnibusArgs{}
}

func (p *MiscServiceColumnOmnibusArgs) InitDefault() {
	*p = MiscServiceColumnOmnibusArgs{}
}

var MiscServiceColumnOmnibusArgs_Request_DEFAULT *ColumnOmnibusRequest

func (p *MiscServiceColumnOmnibusArgs) GetRequest() (v *ColumnOmnibusRequest) {
	if !p.IsSetRequest() {
		return MiscServiceColumnOmnibusArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceColumnOmnibusArgs) SetRequest(val *ColumnOmnibusRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceColumnOmnibusArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceColumnOmnibusArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceColumnOmnibusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceColumnOmnibusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceColumnOmnibusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewColumnOmnibusRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceColumnOmnibusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnOmnibus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceColumnOmnibusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceColumnOmnibusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceColumnOmnibusArgs(%+v)", *p)

}

func (p *MiscServiceColumnOmnibusArgs) DeepEqual(ano *MiscServiceColumnOmnibusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceColumnOmnibusArgs) Field1DeepEqual(src *ColumnOmnibusRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceColumnOmnibusResult struct {
	Success *ColumnOmnibusResponse `thrift:"success,0,optional" frugal:"0,optional,ColumnOmnibusResponse" json:"success,omitempty"`
}

func NewMiscServiceColumnOmnibusResult() *MiscServiceColumnOmnibusResult {
	return &MiscServiceColumnOmnibusResult{}
}

func (p *MiscServiceColumnOmnibusResult) InitDefault() {
	*p = MiscServiceColumnOmnibusResult{}
}

var MiscServiceColumnOmnibusResult_Success_DEFAULT *ColumnOmnibusResponse

func (p *MiscServiceColumnOmnibusResult) GetSuccess() (v *ColumnOmnibusResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceColumnOmnibusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceColumnOmnibusResult) SetSuccess(x interface{}) {
	p.Success = x.(*ColumnOmnibusResponse)
}

var fieldIDToName_MiscServiceColumnOmnibusResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceColumnOmnibusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceColumnOmnibusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceColumnOmnibusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceColumnOmnibusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewColumnOmnibusResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceColumnOmnibusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnOmnibus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceColumnOmnibusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceColumnOmnibusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceColumnOmnibusResult(%+v)", *p)

}

func (p *MiscServiceColumnOmnibusResult) DeepEqual(ano *MiscServiceColumnOmnibusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceColumnOmnibusResult) Field0DeepEqual(src *ColumnOmnibusResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceRichColumnPageArgs struct {
	Request *RichColumnPageRequest `thrift:"request,1" frugal:"1,default,RichColumnPageRequest" json:"request"`
}

func NewMiscServiceRichColumnPageArgs() *MiscServiceRichColumnPageArgs {
	return &MiscServiceRichColumnPageArgs{}
}

func (p *MiscServiceRichColumnPageArgs) InitDefault() {
	*p = MiscServiceRichColumnPageArgs{}
}

var MiscServiceRichColumnPageArgs_Request_DEFAULT *RichColumnPageRequest

func (p *MiscServiceRichColumnPageArgs) GetRequest() (v *RichColumnPageRequest) {
	if !p.IsSetRequest() {
		return MiscServiceRichColumnPageArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceRichColumnPageArgs) SetRequest(val *RichColumnPageRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceRichColumnPageArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceRichColumnPageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceRichColumnPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceRichColumnPageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceRichColumnPageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRichColumnPageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceRichColumnPageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RichColumnPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceRichColumnPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceRichColumnPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceRichColumnPageArgs(%+v)", *p)

}

func (p *MiscServiceRichColumnPageArgs) DeepEqual(ano *MiscServiceRichColumnPageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceRichColumnPageArgs) Field1DeepEqual(src *RichColumnPageRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceRichColumnPageResult struct {
	Success *RichColumnPageResponse `thrift:"success,0,optional" frugal:"0,optional,RichColumnPageResponse" json:"success,omitempty"`
}

func NewMiscServiceRichColumnPageResult() *MiscServiceRichColumnPageResult {
	return &MiscServiceRichColumnPageResult{}
}

func (p *MiscServiceRichColumnPageResult) InitDefault() {
	*p = MiscServiceRichColumnPageResult{}
}

var MiscServiceRichColumnPageResult_Success_DEFAULT *RichColumnPageResponse

func (p *MiscServiceRichColumnPageResult) GetSuccess() (v *RichColumnPageResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceRichColumnPageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceRichColumnPageResult) SetSuccess(x interface{}) {
	p.Success = x.(*RichColumnPageResponse)
}

var fieldIDToName_MiscServiceRichColumnPageResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceRichColumnPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceRichColumnPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceRichColumnPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceRichColumnPageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRichColumnPageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceRichColumnPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RichColumnPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceRichColumnPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceRichColumnPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceRichColumnPageResult(%+v)", *p)

}

func (p *MiscServiceRichColumnPageResult) DeepEqual(ano *MiscServiceRichColumnPageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceRichColumnPageResult) Field0DeepEqual(src *RichColumnPageResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceColumnQueryByIdArgs struct {
	Request *ColumnQueryByIdRequest `thrift:"request,1" frugal:"1,default,ColumnQueryByIdRequest" json:"request"`
}

func NewMiscServiceColumnQueryByIdArgs() *MiscServiceColumnQueryByIdArgs {
	return &MiscServiceColumnQueryByIdArgs{}
}

func (p *MiscServiceColumnQueryByIdArgs) InitDefault() {
	*p = MiscServiceColumnQueryByIdArgs{}
}

var MiscServiceColumnQueryByIdArgs_Request_DEFAULT *ColumnQueryByIdRequest

func (p *MiscServiceColumnQueryByIdArgs) GetRequest() (v *ColumnQueryByIdRequest) {
	if !p.IsSetRequest() {
		return MiscServiceColumnQueryByIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceColumnQueryByIdArgs) SetRequest(val *ColumnQueryByIdRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceColumnQueryByIdArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceColumnQueryByIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceColumnQueryByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceColumnQueryByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceColumnQueryByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewColumnQueryByIdRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceColumnQueryByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQueryById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceColumnQueryByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceColumnQueryByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceColumnQueryByIdArgs(%+v)", *p)

}

func (p *MiscServiceColumnQueryByIdArgs) DeepEqual(ano *MiscServiceColumnQueryByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceColumnQueryByIdArgs) Field1DeepEqual(src *ColumnQueryByIdRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceColumnQueryByIdResult struct {
	Success *ColumnQueryByIdResponse `thrift:"success,0,optional" frugal:"0,optional,ColumnQueryByIdResponse" json:"success,omitempty"`
}

func NewMiscServiceColumnQueryByIdResult() *MiscServiceColumnQueryByIdResult {
	return &MiscServiceColumnQueryByIdResult{}
}

func (p *MiscServiceColumnQueryByIdResult) InitDefault() {
	*p = MiscServiceColumnQueryByIdResult{}
}

var MiscServiceColumnQueryByIdResult_Success_DEFAULT *ColumnQueryByIdResponse

func (p *MiscServiceColumnQueryByIdResult) GetSuccess() (v *ColumnQueryByIdResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceColumnQueryByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceColumnQueryByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*ColumnQueryByIdResponse)
}

var fieldIDToName_MiscServiceColumnQueryByIdResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceColumnQueryByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceColumnQueryByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceColumnQueryByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceColumnQueryByIdResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewColumnQueryByIdResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceColumnQueryByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQueryById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceColumnQueryByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceColumnQueryByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceColumnQueryByIdResult(%+v)", *p)

}

func (p *MiscServiceColumnQueryByIdResult) DeepEqual(ano *MiscServiceColumnQueryByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceColumnQueryByIdResult) Field0DeepEqual(src *ColumnQueryByIdResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceColumnQuoteQueryByColumnIdArgs struct {
	Request *ColumnQuoteQueryByColumnIdRequest `thrift:"request,1" frugal:"1,default,ColumnQuoteQueryByColumnIdRequest" json:"request"`
}

func NewMiscServiceColumnQuoteQueryByColumnIdArgs() *MiscServiceColumnQuoteQueryByColumnIdArgs {
	return &MiscServiceColumnQuoteQueryByColumnIdArgs{}
}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) InitDefault() {
	*p = MiscServiceColumnQuoteQueryByColumnIdArgs{}
}

var MiscServiceColumnQuoteQueryByColumnIdArgs_Request_DEFAULT *ColumnQuoteQueryByColumnIdRequest

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) GetRequest() (v *ColumnQuoteQueryByColumnIdRequest) {
	if !p.IsSetRequest() {
		return MiscServiceColumnQuoteQueryByColumnIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) SetRequest(val *ColumnQuoteQueryByColumnIdRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceColumnQuoteQueryByColumnIdArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceColumnQuoteQueryByColumnIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewColumnQuoteQueryByColumnIdRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQuoteQueryByColumnId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceColumnQuoteQueryByColumnIdArgs(%+v)", *p)

}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) DeepEqual(ano *MiscServiceColumnQuoteQueryByColumnIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceColumnQuoteQueryByColumnIdArgs) Field1DeepEqual(src *ColumnQuoteQueryByColumnIdRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceColumnQuoteQueryByColumnIdResult struct {
	Success *ColumnQuoteQueryByColumnIdResponse `thrift:"success,0,optional" frugal:"0,optional,ColumnQuoteQueryByColumnIdResponse" json:"success,omitempty"`
}

func NewMiscServiceColumnQuoteQueryByColumnIdResult() *MiscServiceColumnQuoteQueryByColumnIdResult {
	return &MiscServiceColumnQuoteQueryByColumnIdResult{}
}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) InitDefault() {
	*p = MiscServiceColumnQuoteQueryByColumnIdResult{}
}

var MiscServiceColumnQuoteQueryByColumnIdResult_Success_DEFAULT *ColumnQuoteQueryByColumnIdResponse

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) GetSuccess() (v *ColumnQuoteQueryByColumnIdResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceColumnQuoteQueryByColumnIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceColumnQuoteQueryByColumnIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*ColumnQuoteQueryByColumnIdResponse)
}

var fieldIDToName_MiscServiceColumnQuoteQueryByColumnIdResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceColumnQuoteQueryByColumnIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewColumnQuoteQueryByColumnIdResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQuoteQueryByColumnId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceColumnQuoteQueryByColumnIdResult(%+v)", *p)

}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) DeepEqual(ano *MiscServiceColumnQuoteQueryByColumnIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceColumnQuoteQueryByColumnIdResult) Field0DeepEqual(src *ColumnQuoteQueryByColumnIdResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceEditorLoginArgs struct {
	Request *EditorLoginRequest `thrift:"request,1" frugal:"1,default,EditorLoginRequest" json:"request"`
}

func NewMiscServiceEditorLoginArgs() *MiscServiceEditorLoginArgs {
	return &MiscServiceEditorLoginArgs{}
}

func (p *MiscServiceEditorLoginArgs) InitDefault() {
	*p = MiscServiceEditorLoginArgs{}
}

var MiscServiceEditorLoginArgs_Request_DEFAULT *EditorLoginRequest

func (p *MiscServiceEditorLoginArgs) GetRequest() (v *EditorLoginRequest) {
	if !p.IsSetRequest() {
		return MiscServiceEditorLoginArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceEditorLoginArgs) SetRequest(val *EditorLoginRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceEditorLoginArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceEditorLoginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceEditorLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceEditorLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceEditorLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEditorLoginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceEditorLoginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditorLogin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceEditorLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceEditorLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceEditorLoginArgs(%+v)", *p)

}

func (p *MiscServiceEditorLoginArgs) DeepEqual(ano *MiscServiceEditorLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceEditorLoginArgs) Field1DeepEqual(src *EditorLoginRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceEditorLoginResult struct {
	Success *EditorLoginResponse `thrift:"success,0,optional" frugal:"0,optional,EditorLoginResponse" json:"success,omitempty"`
}

func NewMiscServiceEditorLoginResult() *MiscServiceEditorLoginResult {
	return &MiscServiceEditorLoginResult{}
}

func (p *MiscServiceEditorLoginResult) InitDefault() {
	*p = MiscServiceEditorLoginResult{}
}

var MiscServiceEditorLoginResult_Success_DEFAULT *EditorLoginResponse

func (p *MiscServiceEditorLoginResult) GetSuccess() (v *EditorLoginResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceEditorLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceEditorLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*EditorLoginResponse)
}

var fieldIDToName_MiscServiceEditorLoginResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceEditorLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceEditorLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceEditorLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceEditorLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewEditorLoginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceEditorLoginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditorLogin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceEditorLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceEditorLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceEditorLoginResult(%+v)", *p)

}

func (p *MiscServiceEditorLoginResult) DeepEqual(ano *MiscServiceEditorLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceEditorLoginResult) Field0DeepEqual(src *EditorLoginResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceReaderLoginArgs struct {
	Request *ReaderLoginRequest `thrift:"request,1" frugal:"1,default,ReaderLoginRequest" json:"request"`
}

func NewMiscServiceReaderLoginArgs() *MiscServiceReaderLoginArgs {
	return &MiscServiceReaderLoginArgs{}
}

func (p *MiscServiceReaderLoginArgs) InitDefault() {
	*p = MiscServiceReaderLoginArgs{}
}

var MiscServiceReaderLoginArgs_Request_DEFAULT *ReaderLoginRequest

func (p *MiscServiceReaderLoginArgs) GetRequest() (v *ReaderLoginRequest) {
	if !p.IsSetRequest() {
		return MiscServiceReaderLoginArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceReaderLoginArgs) SetRequest(val *ReaderLoginRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceReaderLoginArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceReaderLoginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceReaderLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceReaderLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceReaderLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewReaderLoginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceReaderLoginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReaderLogin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceReaderLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceReaderLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceReaderLoginArgs(%+v)", *p)

}

func (p *MiscServiceReaderLoginArgs) DeepEqual(ano *MiscServiceReaderLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceReaderLoginArgs) Field1DeepEqual(src *ReaderLoginRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceReaderLoginResult struct {
	Success *ReaderLoginResponse `thrift:"success,0,optional" frugal:"0,optional,ReaderLoginResponse" json:"success,omitempty"`
}

func NewMiscServiceReaderLoginResult() *MiscServiceReaderLoginResult {
	return &MiscServiceReaderLoginResult{}
}

func (p *MiscServiceReaderLoginResult) InitDefault() {
	*p = MiscServiceReaderLoginResult{}
}

var MiscServiceReaderLoginResult_Success_DEFAULT *ReaderLoginResponse

func (p *MiscServiceReaderLoginResult) GetSuccess() (v *ReaderLoginResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceReaderLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceReaderLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReaderLoginResponse)
}

var fieldIDToName_MiscServiceReaderLoginResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceReaderLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceReaderLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceReaderLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceReaderLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewReaderLoginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceReaderLoginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReaderLogin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceReaderLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceReaderLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceReaderLoginResult(%+v)", *p)

}

func (p *MiscServiceReaderLoginResult) DeepEqual(ano *MiscServiceReaderLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceReaderLoginResult) Field0DeepEqual(src *ReaderLoginResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceReaderQueryByIdArgs struct {
	Request *ReaderQueryByIdRequest `thrift:"request,1" frugal:"1,default,ReaderQueryByIdRequest" json:"request"`
}

func NewMiscServiceReaderQueryByIdArgs() *MiscServiceReaderQueryByIdArgs {
	return &MiscServiceReaderQueryByIdArgs{}
}

func (p *MiscServiceReaderQueryByIdArgs) InitDefault() {
	*p = MiscServiceReaderQueryByIdArgs{}
}

var MiscServiceReaderQueryByIdArgs_Request_DEFAULT *ReaderQueryByIdRequest

func (p *MiscServiceReaderQueryByIdArgs) GetRequest() (v *ReaderQueryByIdRequest) {
	if !p.IsSetRequest() {
		return MiscServiceReaderQueryByIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceReaderQueryByIdArgs) SetRequest(val *ReaderQueryByIdRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceReaderQueryByIdArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceReaderQueryByIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceReaderQueryByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceReaderQueryByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceReaderQueryByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewReaderQueryByIdRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceReaderQueryByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReaderQueryById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceReaderQueryByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceReaderQueryByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceReaderQueryByIdArgs(%+v)", *p)

}

func (p *MiscServiceReaderQueryByIdArgs) DeepEqual(ano *MiscServiceReaderQueryByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceReaderQueryByIdArgs) Field1DeepEqual(src *ReaderQueryByIdRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceReaderQueryByIdResult struct {
	Success *ReaderQueryByIdResponse `thrift:"success,0,optional" frugal:"0,optional,ReaderQueryByIdResponse" json:"success,omitempty"`
}

func NewMiscServiceReaderQueryByIdResult() *MiscServiceReaderQueryByIdResult {
	return &MiscServiceReaderQueryByIdResult{}
}

func (p *MiscServiceReaderQueryByIdResult) InitDefault() {
	*p = MiscServiceReaderQueryByIdResult{}
}

var MiscServiceReaderQueryByIdResult_Success_DEFAULT *ReaderQueryByIdResponse

func (p *MiscServiceReaderQueryByIdResult) GetSuccess() (v *ReaderQueryByIdResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceReaderQueryByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceReaderQueryByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReaderQueryByIdResponse)
}

var fieldIDToName_MiscServiceReaderQueryByIdResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceReaderQueryByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceReaderQueryByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceReaderQueryByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceReaderQueryByIdResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewReaderQueryByIdResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceReaderQueryByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReaderQueryById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceReaderQueryByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceReaderQueryByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceReaderQueryByIdResult(%+v)", *p)

}

func (p *MiscServiceReaderQueryByIdResult) DeepEqual(ano *MiscServiceReaderQueryByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceReaderQueryByIdResult) Field0DeepEqual(src *ReaderQueryByIdResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentQueryByIdArgs struct {
	Request *PaymentQueryByIdRequest `thrift:"request,1" frugal:"1,default,PaymentQueryByIdRequest" json:"request"`
}

func NewMiscServicePaymentQueryByIdArgs() *MiscServicePaymentQueryByIdArgs {
	return &MiscServicePaymentQueryByIdArgs{}
}

func (p *MiscServicePaymentQueryByIdArgs) InitDefault() {
	*p = MiscServicePaymentQueryByIdArgs{}
}

var MiscServicePaymentQueryByIdArgs_Request_DEFAULT *PaymentQueryByIdRequest

func (p *MiscServicePaymentQueryByIdArgs) GetRequest() (v *PaymentQueryByIdRequest) {
	if !p.IsSetRequest() {
		return MiscServicePaymentQueryByIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServicePaymentQueryByIdArgs) SetRequest(val *PaymentQueryByIdRequest) {
	p.Request = val
}

var fieldIDToName_MiscServicePaymentQueryByIdArgs = map[int16]string{
	1: "request",
}

func (p *MiscServicePaymentQueryByIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServicePaymentQueryByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentQueryByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentQueryByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPaymentQueryByIdRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServicePaymentQueryByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentQueryById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentQueryByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServicePaymentQueryByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentQueryByIdArgs(%+v)", *p)

}

func (p *MiscServicePaymentQueryByIdArgs) DeepEqual(ano *MiscServicePaymentQueryByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServicePaymentQueryByIdArgs) Field1DeepEqual(src *PaymentQueryByIdRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentQueryByIdResult struct {
	Success *PaymentQueryByIdResponse `thrift:"success,0,optional" frugal:"0,optional,PaymentQueryByIdResponse" json:"success,omitempty"`
}

func NewMiscServicePaymentQueryByIdResult() *MiscServicePaymentQueryByIdResult {
	return &MiscServicePaymentQueryByIdResult{}
}

func (p *MiscServicePaymentQueryByIdResult) InitDefault() {
	*p = MiscServicePaymentQueryByIdResult{}
}

var MiscServicePaymentQueryByIdResult_Success_DEFAULT *PaymentQueryByIdResponse

func (p *MiscServicePaymentQueryByIdResult) GetSuccess() (v *PaymentQueryByIdResponse) {
	if !p.IsSetSuccess() {
		return MiscServicePaymentQueryByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServicePaymentQueryByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*PaymentQueryByIdResponse)
}

var fieldIDToName_MiscServicePaymentQueryByIdResult = map[int16]string{
	0: "success",
}

func (p *MiscServicePaymentQueryByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServicePaymentQueryByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentQueryByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentQueryByIdResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPaymentQueryByIdResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServicePaymentQueryByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentQueryById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentQueryByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServicePaymentQueryByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentQueryByIdResult(%+v)", *p)

}

func (p *MiscServicePaymentQueryByIdResult) DeepEqual(ano *MiscServicePaymentQueryByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServicePaymentQueryByIdResult) Field0DeepEqual(src *PaymentQueryByIdResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentPrepareArgs struct {
	Request *PaymentPrepareRequest `thrift:"request,1" frugal:"1,default,PaymentPrepareRequest" json:"request"`
}

func NewMiscServicePaymentPrepareArgs() *MiscServicePaymentPrepareArgs {
	return &MiscServicePaymentPrepareArgs{}
}

func (p *MiscServicePaymentPrepareArgs) InitDefault() {
	*p = MiscServicePaymentPrepareArgs{}
}

var MiscServicePaymentPrepareArgs_Request_DEFAULT *PaymentPrepareRequest

func (p *MiscServicePaymentPrepareArgs) GetRequest() (v *PaymentPrepareRequest) {
	if !p.IsSetRequest() {
		return MiscServicePaymentPrepareArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServicePaymentPrepareArgs) SetRequest(val *PaymentPrepareRequest) {
	p.Request = val
}

var fieldIDToName_MiscServicePaymentPrepareArgs = map[int16]string{
	1: "request",
}

func (p *MiscServicePaymentPrepareArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServicePaymentPrepareArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentPrepareArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentPrepareArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPaymentPrepareRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServicePaymentPrepareArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentPrepare_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentPrepareArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServicePaymentPrepareArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentPrepareArgs(%+v)", *p)

}

func (p *MiscServicePaymentPrepareArgs) DeepEqual(ano *MiscServicePaymentPrepareArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServicePaymentPrepareArgs) Field1DeepEqual(src *PaymentPrepareRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentPrepareResult struct {
	Success *PaymentPrepareResponse `thrift:"success,0,optional" frugal:"0,optional,PaymentPrepareResponse" json:"success,omitempty"`
}

func NewMiscServicePaymentPrepareResult() *MiscServicePaymentPrepareResult {
	return &MiscServicePaymentPrepareResult{}
}

func (p *MiscServicePaymentPrepareResult) InitDefault() {
	*p = MiscServicePaymentPrepareResult{}
}

var MiscServicePaymentPrepareResult_Success_DEFAULT *PaymentPrepareResponse

func (p *MiscServicePaymentPrepareResult) GetSuccess() (v *PaymentPrepareResponse) {
	if !p.IsSetSuccess() {
		return MiscServicePaymentPrepareResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServicePaymentPrepareResult) SetSuccess(x interface{}) {
	p.Success = x.(*PaymentPrepareResponse)
}

var fieldIDToName_MiscServicePaymentPrepareResult = map[int16]string{
	0: "success",
}

func (p *MiscServicePaymentPrepareResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServicePaymentPrepareResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentPrepareResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentPrepareResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPaymentPrepareResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServicePaymentPrepareResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentPrepare_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentPrepareResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServicePaymentPrepareResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentPrepareResult(%+v)", *p)

}

func (p *MiscServicePaymentPrepareResult) DeepEqual(ano *MiscServicePaymentPrepareResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServicePaymentPrepareResult) Field0DeepEqual(src *PaymentPrepareResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentCreateArgs struct {
	Request *PaymentCreateRequest `thrift:"request,1" frugal:"1,default,PaymentCreateRequest" json:"request"`
}

func NewMiscServicePaymentCreateArgs() *MiscServicePaymentCreateArgs {
	return &MiscServicePaymentCreateArgs{}
}

func (p *MiscServicePaymentCreateArgs) InitDefault() {
	*p = MiscServicePaymentCreateArgs{}
}

var MiscServicePaymentCreateArgs_Request_DEFAULT *PaymentCreateRequest

func (p *MiscServicePaymentCreateArgs) GetRequest() (v *PaymentCreateRequest) {
	if !p.IsSetRequest() {
		return MiscServicePaymentCreateArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServicePaymentCreateArgs) SetRequest(val *PaymentCreateRequest) {
	p.Request = val
}

var fieldIDToName_MiscServicePaymentCreateArgs = map[int16]string{
	1: "request",
}

func (p *MiscServicePaymentCreateArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServicePaymentCreateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentCreateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentCreateArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPaymentCreateRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServicePaymentCreateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentCreate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentCreateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServicePaymentCreateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentCreateArgs(%+v)", *p)

}

func (p *MiscServicePaymentCreateArgs) DeepEqual(ano *MiscServicePaymentCreateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServicePaymentCreateArgs) Field1DeepEqual(src *PaymentCreateRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentCreateResult struct {
	Success *PaymentCreateResponse `thrift:"success,0,optional" frugal:"0,optional,PaymentCreateResponse" json:"success,omitempty"`
}

func NewMiscServicePaymentCreateResult() *MiscServicePaymentCreateResult {
	return &MiscServicePaymentCreateResult{}
}

func (p *MiscServicePaymentCreateResult) InitDefault() {
	*p = MiscServicePaymentCreateResult{}
}

var MiscServicePaymentCreateResult_Success_DEFAULT *PaymentCreateResponse

func (p *MiscServicePaymentCreateResult) GetSuccess() (v *PaymentCreateResponse) {
	if !p.IsSetSuccess() {
		return MiscServicePaymentCreateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServicePaymentCreateResult) SetSuccess(x interface{}) {
	p.Success = x.(*PaymentCreateResponse)
}

var fieldIDToName_MiscServicePaymentCreateResult = map[int16]string{
	0: "success",
}

func (p *MiscServicePaymentCreateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServicePaymentCreateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentCreateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentCreateResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPaymentCreateResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServicePaymentCreateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentCreate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentCreateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServicePaymentCreateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentCreateResult(%+v)", *p)

}

func (p *MiscServicePaymentCreateResult) DeepEqual(ano *MiscServicePaymentCreateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServicePaymentCreateResult) Field0DeepEqual(src *PaymentCreateResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentPaidCallbackArgs struct {
	Request *PaymentPaidCallbackRequest `thrift:"request,1" frugal:"1,default,PaymentPaidCallbackRequest" json:"request"`
}

func NewMiscServicePaymentPaidCallbackArgs() *MiscServicePaymentPaidCallbackArgs {
	return &MiscServicePaymentPaidCallbackArgs{}
}

func (p *MiscServicePaymentPaidCallbackArgs) InitDefault() {
	*p = MiscServicePaymentPaidCallbackArgs{}
}

var MiscServicePaymentPaidCallbackArgs_Request_DEFAULT *PaymentPaidCallbackRequest

func (p *MiscServicePaymentPaidCallbackArgs) GetRequest() (v *PaymentPaidCallbackRequest) {
	if !p.IsSetRequest() {
		return MiscServicePaymentPaidCallbackArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServicePaymentPaidCallbackArgs) SetRequest(val *PaymentPaidCallbackRequest) {
	p.Request = val
}

var fieldIDToName_MiscServicePaymentPaidCallbackArgs = map[int16]string{
	1: "request",
}

func (p *MiscServicePaymentPaidCallbackArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServicePaymentPaidCallbackArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentPaidCallbackArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentPaidCallbackArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPaymentPaidCallbackRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServicePaymentPaidCallbackArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentPaidCallback_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentPaidCallbackArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServicePaymentPaidCallbackArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentPaidCallbackArgs(%+v)", *p)

}

func (p *MiscServicePaymentPaidCallbackArgs) DeepEqual(ano *MiscServicePaymentPaidCallbackArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServicePaymentPaidCallbackArgs) Field1DeepEqual(src *PaymentPaidCallbackRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentPaidCallbackResult struct {
	Success *PaymentPaidCallbackResponse `thrift:"success,0,optional" frugal:"0,optional,PaymentPaidCallbackResponse" json:"success,omitempty"`
}

func NewMiscServicePaymentPaidCallbackResult() *MiscServicePaymentPaidCallbackResult {
	return &MiscServicePaymentPaidCallbackResult{}
}

func (p *MiscServicePaymentPaidCallbackResult) InitDefault() {
	*p = MiscServicePaymentPaidCallbackResult{}
}

var MiscServicePaymentPaidCallbackResult_Success_DEFAULT *PaymentPaidCallbackResponse

func (p *MiscServicePaymentPaidCallbackResult) GetSuccess() (v *PaymentPaidCallbackResponse) {
	if !p.IsSetSuccess() {
		return MiscServicePaymentPaidCallbackResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServicePaymentPaidCallbackResult) SetSuccess(x interface{}) {
	p.Success = x.(*PaymentPaidCallbackResponse)
}

var fieldIDToName_MiscServicePaymentPaidCallbackResult = map[int16]string{
	0: "success",
}

func (p *MiscServicePaymentPaidCallbackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServicePaymentPaidCallbackResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentPaidCallbackResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentPaidCallbackResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPaymentPaidCallbackResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServicePaymentPaidCallbackResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentPaidCallback_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentPaidCallbackResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServicePaymentPaidCallbackResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentPaidCallbackResult(%+v)", *p)

}

func (p *MiscServicePaymentPaidCallbackResult) DeepEqual(ano *MiscServicePaymentPaidCallbackResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServicePaymentPaidCallbackResult) Field0DeepEqual(src *PaymentPaidCallbackResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentPublishMqArgs struct {
	Request *PaymentPublishMqRequest `thrift:"request,1" frugal:"1,default,PaymentPublishMqRequest" json:"request"`
}

func NewMiscServicePaymentPublishMqArgs() *MiscServicePaymentPublishMqArgs {
	return &MiscServicePaymentPublishMqArgs{}
}

func (p *MiscServicePaymentPublishMqArgs) InitDefault() {
	*p = MiscServicePaymentPublishMqArgs{}
}

var MiscServicePaymentPublishMqArgs_Request_DEFAULT *PaymentPublishMqRequest

func (p *MiscServicePaymentPublishMqArgs) GetRequest() (v *PaymentPublishMqRequest) {
	if !p.IsSetRequest() {
		return MiscServicePaymentPublishMqArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServicePaymentPublishMqArgs) SetRequest(val *PaymentPublishMqRequest) {
	p.Request = val
}

var fieldIDToName_MiscServicePaymentPublishMqArgs = map[int16]string{
	1: "request",
}

func (p *MiscServicePaymentPublishMqArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServicePaymentPublishMqArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentPublishMqArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentPublishMqArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPaymentPublishMqRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServicePaymentPublishMqArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentPublishMq_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentPublishMqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServicePaymentPublishMqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentPublishMqArgs(%+v)", *p)

}

func (p *MiscServicePaymentPublishMqArgs) DeepEqual(ano *MiscServicePaymentPublishMqArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServicePaymentPublishMqArgs) Field1DeepEqual(src *PaymentPublishMqRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServicePaymentPublishMqResult struct {
	Success *PaymentPublishMqResponse `thrift:"success,0,optional" frugal:"0,optional,PaymentPublishMqResponse" json:"success,omitempty"`
}

func NewMiscServicePaymentPublishMqResult() *MiscServicePaymentPublishMqResult {
	return &MiscServicePaymentPublishMqResult{}
}

func (p *MiscServicePaymentPublishMqResult) InitDefault() {
	*p = MiscServicePaymentPublishMqResult{}
}

var MiscServicePaymentPublishMqResult_Success_DEFAULT *PaymentPublishMqResponse

func (p *MiscServicePaymentPublishMqResult) GetSuccess() (v *PaymentPublishMqResponse) {
	if !p.IsSetSuccess() {
		return MiscServicePaymentPublishMqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServicePaymentPublishMqResult) SetSuccess(x interface{}) {
	p.Success = x.(*PaymentPublishMqResponse)
}

var fieldIDToName_MiscServicePaymentPublishMqResult = map[int16]string{
	0: "success",
}

func (p *MiscServicePaymentPublishMqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServicePaymentPublishMqResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServicePaymentPublishMqResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServicePaymentPublishMqResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPaymentPublishMqResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServicePaymentPublishMqResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentPublishMq_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServicePaymentPublishMqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServicePaymentPublishMqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServicePaymentPublishMqResult(%+v)", *p)

}

func (p *MiscServicePaymentPublishMqResult) DeepEqual(ano *MiscServicePaymentPublishMqResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServicePaymentPublishMqResult) Field0DeepEqual(src *PaymentPublishMqResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
