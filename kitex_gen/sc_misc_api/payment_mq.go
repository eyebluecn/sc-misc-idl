// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package sc_misc_api

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type PaymentMqEvent int64

const (
	PaymentMqEvent_PAYMENT_CREATED PaymentMqEvent = 0
	PaymentMqEvent_PAYMENT_PAID    PaymentMqEvent = 1
	PaymentMqEvent_PAYMENT_CLOSED  PaymentMqEvent = 2
)

func (p PaymentMqEvent) String() string {
	switch p {
	case PaymentMqEvent_PAYMENT_CREATED:
		return "PAYMENT_CREATED"
	case PaymentMqEvent_PAYMENT_PAID:
		return "PAYMENT_PAID"
	case PaymentMqEvent_PAYMENT_CLOSED:
		return "PAYMENT_CLOSED"
	}
	return "<UNSET>"
}

func PaymentMqEventFromString(s string) (PaymentMqEvent, error) {
	switch s {
	case "PAYMENT_CREATED":
		return PaymentMqEvent_PAYMENT_CREATED, nil
	case "PAYMENT_PAID":
		return PaymentMqEvent_PAYMENT_PAID, nil
	case "PAYMENT_CLOSED":
		return PaymentMqEvent_PAYMENT_CLOSED, nil
	}
	return PaymentMqEvent(0), fmt.Errorf("not a valid PaymentMqEvent string")
}

func PaymentMqEventPtr(v PaymentMqEvent) *PaymentMqEvent { return &v }
func (p *PaymentMqEvent) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = PaymentMqEvent(result.Int64)
	return
}

func (p *PaymentMqEvent) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type PaymentMqPayload struct {
	PaymentDTO *PaymentDTO    `thrift:"paymentDTO,1" frugal:"1,default,PaymentDTO" json:"paymentDTO"`
	Event      PaymentMqEvent `thrift:"event,2" frugal:"2,default,PaymentMqEvent" json:"event"`
	OccurTime  int64          `thrift:"occurTime,3" frugal:"3,default,i64" json:"occurTime"`
}

func NewPaymentMqPayload() *PaymentMqPayload {
	return &PaymentMqPayload{}
}

func (p *PaymentMqPayload) InitDefault() {
	*p = PaymentMqPayload{}
}

var PaymentMqPayload_PaymentDTO_DEFAULT *PaymentDTO

func (p *PaymentMqPayload) GetPaymentDTO() (v *PaymentDTO) {
	if !p.IsSetPaymentDTO() {
		return PaymentMqPayload_PaymentDTO_DEFAULT
	}
	return p.PaymentDTO
}

func (p *PaymentMqPayload) GetEvent() (v PaymentMqEvent) {
	return p.Event
}

func (p *PaymentMqPayload) GetOccurTime() (v int64) {
	return p.OccurTime
}
func (p *PaymentMqPayload) SetPaymentDTO(val *PaymentDTO) {
	p.PaymentDTO = val
}
func (p *PaymentMqPayload) SetEvent(val PaymentMqEvent) {
	p.Event = val
}
func (p *PaymentMqPayload) SetOccurTime(val int64) {
	p.OccurTime = val
}

var fieldIDToName_PaymentMqPayload = map[int16]string{
	1: "paymentDTO",
	2: "event",
	3: "occurTime",
}

func (p *PaymentMqPayload) IsSetPaymentDTO() bool {
	return p.PaymentDTO != nil
}

func (p *PaymentMqPayload) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PaymentMqPayload[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PaymentMqPayload) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPaymentDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PaymentDTO = _field
	return nil
}
func (p *PaymentMqPayload) ReadField2(iprot thrift.TProtocol) error {

	var _field PaymentMqEvent
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = PaymentMqEvent(v)
	}
	p.Event = _field
	return nil
}
func (p *PaymentMqPayload) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OccurTime = _field
	return nil
}

func (p *PaymentMqPayload) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentMqPayload"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PaymentMqPayload) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paymentDTO", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PaymentDTO.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PaymentMqPayload) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("event", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Event)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PaymentMqPayload) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("occurTime", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OccurTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PaymentMqPayload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentMqPayload(%+v)", *p)

}

func (p *PaymentMqPayload) DeepEqual(ano *PaymentMqPayload) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PaymentDTO) {
		return false
	}
	if !p.Field2DeepEqual(ano.Event) {
		return false
	}
	if !p.Field3DeepEqual(ano.OccurTime) {
		return false
	}
	return true
}

func (p *PaymentMqPayload) Field1DeepEqual(src *PaymentDTO) bool {

	if !p.PaymentDTO.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PaymentMqPayload) Field2DeepEqual(src PaymentMqEvent) bool {

	if p.Event != src {
		return false
	}
	return true
}
func (p *PaymentMqPayload) Field3DeepEqual(src int64) bool {

	if p.OccurTime != src {
		return false
	}
	return true
}
