// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package sc_misc_api

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/eyebluecn/sc-misc-idl/kitex_gen/sc_misc_base"
	"strings"
)

type PaymentPaidCallbackRequest struct {
	OrderNo string             `thrift:"orderNo,1" frugal:"1,default,string" json:"orderNo"`
	Base    *sc_misc_base.Base `thrift:"base,255,optional" frugal:"255,optional,sc_misc_base.Base" json:"base,omitempty"`
}

func NewPaymentPaidCallbackRequest() *PaymentPaidCallbackRequest {
	return &PaymentPaidCallbackRequest{}
}

func (p *PaymentPaidCallbackRequest) InitDefault() {
	*p = PaymentPaidCallbackRequest{}
}

func (p *PaymentPaidCallbackRequest) GetOrderNo() (v string) {
	return p.OrderNo
}

var PaymentPaidCallbackRequest_Base_DEFAULT *sc_misc_base.Base

func (p *PaymentPaidCallbackRequest) GetBase() (v *sc_misc_base.Base) {
	if !p.IsSetBase() {
		return PaymentPaidCallbackRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *PaymentPaidCallbackRequest) SetOrderNo(val string) {
	p.OrderNo = val
}
func (p *PaymentPaidCallbackRequest) SetBase(val *sc_misc_base.Base) {
	p.Base = val
}

var fieldIDToName_PaymentPaidCallbackRequest = map[int16]string{
	1:   "orderNo",
	255: "base",
}

func (p *PaymentPaidCallbackRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *PaymentPaidCallbackRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PaymentPaidCallbackRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PaymentPaidCallbackRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OrderNo = _field
	return nil
}
func (p *PaymentPaidCallbackRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *PaymentPaidCallbackRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentPaidCallbackRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PaymentPaidCallbackRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PaymentPaidCallbackRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *PaymentPaidCallbackRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentPaidCallbackRequest(%+v)", *p)

}

func (p *PaymentPaidCallbackRequest) DeepEqual(ano *PaymentPaidCallbackRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderNo) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *PaymentPaidCallbackRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.OrderNo, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentPaidCallbackRequest) Field255DeepEqual(src *sc_misc_base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type PaymentPaidCallbackResponse struct {
	Payment  *PaymentDTO            `thrift:"payment,1" frugal:"1,default,PaymentDTO" json:"payment"`
	BaseResp *sc_misc_base.BaseResp `thrift:"baseResp,255" frugal:"255,default,sc_misc_base.BaseResp" json:"baseResp"`
}

func NewPaymentPaidCallbackResponse() *PaymentPaidCallbackResponse {
	return &PaymentPaidCallbackResponse{}
}

func (p *PaymentPaidCallbackResponse) InitDefault() {
	*p = PaymentPaidCallbackResponse{}
}

var PaymentPaidCallbackResponse_Payment_DEFAULT *PaymentDTO

func (p *PaymentPaidCallbackResponse) GetPayment() (v *PaymentDTO) {
	if !p.IsSetPayment() {
		return PaymentPaidCallbackResponse_Payment_DEFAULT
	}
	return p.Payment
}

var PaymentPaidCallbackResponse_BaseResp_DEFAULT *sc_misc_base.BaseResp

func (p *PaymentPaidCallbackResponse) GetBaseResp() (v *sc_misc_base.BaseResp) {
	if !p.IsSetBaseResp() {
		return PaymentPaidCallbackResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *PaymentPaidCallbackResponse) SetPayment(val *PaymentDTO) {
	p.Payment = val
}
func (p *PaymentPaidCallbackResponse) SetBaseResp(val *sc_misc_base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_PaymentPaidCallbackResponse = map[int16]string{
	1:   "payment",
	255: "baseResp",
}

func (p *PaymentPaidCallbackResponse) IsSetPayment() bool {
	return p.Payment != nil
}

func (p *PaymentPaidCallbackResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *PaymentPaidCallbackResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PaymentPaidCallbackResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PaymentPaidCallbackResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPaymentDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Payment = _field
	return nil
}
func (p *PaymentPaidCallbackResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *PaymentPaidCallbackResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentPaidCallbackResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PaymentPaidCallbackResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payment", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Payment.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PaymentPaidCallbackResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *PaymentPaidCallbackResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentPaidCallbackResponse(%+v)", *p)

}

func (p *PaymentPaidCallbackResponse) DeepEqual(ano *PaymentPaidCallbackResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Payment) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *PaymentPaidCallbackResponse) Field1DeepEqual(src *PaymentDTO) bool {

	if !p.Payment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PaymentPaidCallbackResponse) Field255DeepEqual(src *sc_misc_base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
