// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package sc_misc_api

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/eyebluecn/sc-misc-idl/kitex_gen/sc_misc_base"
	"strings"
)

type ColumnOmnibusRequest struct {
	AuthorName  string                 `thrift:"authorName,1" frugal:"1,default,string" json:"authorName"`
	ColumnName  string                 `thrift:"columnName,2" frugal:"2,default,string" json:"columnName"`
	ColumnPrice int64                  `thrift:"columnPrice,3" frugal:"3,default,i64" json:"columnPrice"`
	Operator    *sc_misc_base.Operator `thrift:"operator,4" frugal:"4,default,sc_misc_base.Operator" json:"operator"`
	Base        *sc_misc_base.Base     `thrift:"base,255,optional" frugal:"255,optional,sc_misc_base.Base" json:"base,omitempty"`
}

func NewColumnOmnibusRequest() *ColumnOmnibusRequest {
	return &ColumnOmnibusRequest{}
}

func (p *ColumnOmnibusRequest) InitDefault() {
	*p = ColumnOmnibusRequest{}
}

func (p *ColumnOmnibusRequest) GetAuthorName() (v string) {
	return p.AuthorName
}

func (p *ColumnOmnibusRequest) GetColumnName() (v string) {
	return p.ColumnName
}

func (p *ColumnOmnibusRequest) GetColumnPrice() (v int64) {
	return p.ColumnPrice
}

var ColumnOmnibusRequest_Operator_DEFAULT *sc_misc_base.Operator

func (p *ColumnOmnibusRequest) GetOperator() (v *sc_misc_base.Operator) {
	if !p.IsSetOperator() {
		return ColumnOmnibusRequest_Operator_DEFAULT
	}
	return p.Operator
}

var ColumnOmnibusRequest_Base_DEFAULT *sc_misc_base.Base

func (p *ColumnOmnibusRequest) GetBase() (v *sc_misc_base.Base) {
	if !p.IsSetBase() {
		return ColumnOmnibusRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ColumnOmnibusRequest) SetAuthorName(val string) {
	p.AuthorName = val
}
func (p *ColumnOmnibusRequest) SetColumnName(val string) {
	p.ColumnName = val
}
func (p *ColumnOmnibusRequest) SetColumnPrice(val int64) {
	p.ColumnPrice = val
}
func (p *ColumnOmnibusRequest) SetOperator(val *sc_misc_base.Operator) {
	p.Operator = val
}
func (p *ColumnOmnibusRequest) SetBase(val *sc_misc_base.Base) {
	p.Base = val
}

var fieldIDToName_ColumnOmnibusRequest = map[int16]string{
	1:   "authorName",
	2:   "columnName",
	3:   "columnPrice",
	4:   "operator",
	255: "base",
}

func (p *ColumnOmnibusRequest) IsSetOperator() bool {
	return p.Operator != nil
}

func (p *ColumnOmnibusRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ColumnOmnibusRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnOmnibusRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnOmnibusRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AuthorName = _field
	return nil
}
func (p *ColumnOmnibusRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnName = _field
	return nil
}
func (p *ColumnOmnibusRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnPrice = _field
	return nil
}
func (p *ColumnOmnibusRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewOperator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Operator = _field
	return nil
}
func (p *ColumnOmnibusRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ColumnOmnibusRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnOmnibusRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnOmnibusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("authorName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AuthorName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnOmnibusRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ColumnName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ColumnOmnibusRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnPrice", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ColumnPrice); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ColumnOmnibusRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operator", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Operator.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ColumnOmnibusRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ColumnOmnibusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnOmnibusRequest(%+v)", *p)

}

func (p *ColumnOmnibusRequest) DeepEqual(ano *ColumnOmnibusRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AuthorName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnName) {
		return false
	}
	if !p.Field3DeepEqual(ano.ColumnPrice) {
		return false
	}
	if !p.Field4DeepEqual(ano.Operator) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ColumnOmnibusRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AuthorName, src) != 0 {
		return false
	}
	return true
}
func (p *ColumnOmnibusRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ColumnName, src) != 0 {
		return false
	}
	return true
}
func (p *ColumnOmnibusRequest) Field3DeepEqual(src int64) bool {

	if p.ColumnPrice != src {
		return false
	}
	return true
}
func (p *ColumnOmnibusRequest) Field4DeepEqual(src *sc_misc_base.Operator) bool {

	if !p.Operator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ColumnOmnibusRequest) Field255DeepEqual(src *sc_misc_base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ColumnOmnibusResponse struct {
	RichColumnDTO *RichColumnDTO         `thrift:"richColumnDTO,1" frugal:"1,default,RichColumnDTO" json:"richColumnDTO"`
	BaseResp      *sc_misc_base.BaseResp `thrift:"baseResp,255" frugal:"255,default,sc_misc_base.BaseResp" json:"baseResp"`
}

func NewColumnOmnibusResponse() *ColumnOmnibusResponse {
	return &ColumnOmnibusResponse{}
}

func (p *ColumnOmnibusResponse) InitDefault() {
	*p = ColumnOmnibusResponse{}
}

var ColumnOmnibusResponse_RichColumnDTO_DEFAULT *RichColumnDTO

func (p *ColumnOmnibusResponse) GetRichColumnDTO() (v *RichColumnDTO) {
	if !p.IsSetRichColumnDTO() {
		return ColumnOmnibusResponse_RichColumnDTO_DEFAULT
	}
	return p.RichColumnDTO
}

var ColumnOmnibusResponse_BaseResp_DEFAULT *sc_misc_base.BaseResp

func (p *ColumnOmnibusResponse) GetBaseResp() (v *sc_misc_base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ColumnOmnibusResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ColumnOmnibusResponse) SetRichColumnDTO(val *RichColumnDTO) {
	p.RichColumnDTO = val
}
func (p *ColumnOmnibusResponse) SetBaseResp(val *sc_misc_base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ColumnOmnibusResponse = map[int16]string{
	1:   "richColumnDTO",
	255: "baseResp",
}

func (p *ColumnOmnibusResponse) IsSetRichColumnDTO() bool {
	return p.RichColumnDTO != nil
}

func (p *ColumnOmnibusResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ColumnOmnibusResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnOmnibusResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnOmnibusResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRichColumnDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RichColumnDTO = _field
	return nil
}
func (p *ColumnOmnibusResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ColumnOmnibusResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnOmnibusResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnOmnibusResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("richColumnDTO", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RichColumnDTO.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnOmnibusResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ColumnOmnibusResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnOmnibusResponse(%+v)", *p)

}

func (p *ColumnOmnibusResponse) DeepEqual(ano *ColumnOmnibusResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RichColumnDTO) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ColumnOmnibusResponse) Field1DeepEqual(src *RichColumnDTO) bool {

	if !p.RichColumnDTO.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ColumnOmnibusResponse) Field255DeepEqual(src *sc_misc_base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type RichColumnPageRequest struct {
	PageNum  int64                  `thrift:"pageNum,1" frugal:"1,default,i64" json:"pageNum"`
	PageSize int64                  `thrift:"pageSize,2" frugal:"2,default,i64" json:"pageSize"`
	Name     *string                `thrift:"name,4,optional" frugal:"4,optional,string" json:"name,omitempty"`
	AuthorId *int64                 `thrift:"authorId,5,optional" frugal:"5,optional,i64" json:"authorId,omitempty"`
	Status   *ColumnStatus          `thrift:"status,6,optional" frugal:"6,optional,ColumnStatus" json:"status,omitempty"`
	Operator *sc_misc_base.Operator `thrift:"operator,7" frugal:"7,default,sc_misc_base.Operator" json:"operator"`
	Base     *sc_misc_base.Base     `thrift:"base,255,optional" frugal:"255,optional,sc_misc_base.Base" json:"base,omitempty"`
}

func NewRichColumnPageRequest() *RichColumnPageRequest {
	return &RichColumnPageRequest{}
}

func (p *RichColumnPageRequest) InitDefault() {
	*p = RichColumnPageRequest{}
}

func (p *RichColumnPageRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *RichColumnPageRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var RichColumnPageRequest_Name_DEFAULT string

func (p *RichColumnPageRequest) GetName() (v string) {
	if !p.IsSetName() {
		return RichColumnPageRequest_Name_DEFAULT
	}
	return *p.Name
}

var RichColumnPageRequest_AuthorId_DEFAULT int64

func (p *RichColumnPageRequest) GetAuthorId() (v int64) {
	if !p.IsSetAuthorId() {
		return RichColumnPageRequest_AuthorId_DEFAULT
	}
	return *p.AuthorId
}

var RichColumnPageRequest_Status_DEFAULT ColumnStatus

func (p *RichColumnPageRequest) GetStatus() (v ColumnStatus) {
	if !p.IsSetStatus() {
		return RichColumnPageRequest_Status_DEFAULT
	}
	return *p.Status
}

var RichColumnPageRequest_Operator_DEFAULT *sc_misc_base.Operator

func (p *RichColumnPageRequest) GetOperator() (v *sc_misc_base.Operator) {
	if !p.IsSetOperator() {
		return RichColumnPageRequest_Operator_DEFAULT
	}
	return p.Operator
}

var RichColumnPageRequest_Base_DEFAULT *sc_misc_base.Base

func (p *RichColumnPageRequest) GetBase() (v *sc_misc_base.Base) {
	if !p.IsSetBase() {
		return RichColumnPageRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RichColumnPageRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *RichColumnPageRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *RichColumnPageRequest) SetName(val *string) {
	p.Name = val
}
func (p *RichColumnPageRequest) SetAuthorId(val *int64) {
	p.AuthorId = val
}
func (p *RichColumnPageRequest) SetStatus(val *ColumnStatus) {
	p.Status = val
}
func (p *RichColumnPageRequest) SetOperator(val *sc_misc_base.Operator) {
	p.Operator = val
}
func (p *RichColumnPageRequest) SetBase(val *sc_misc_base.Base) {
	p.Base = val
}

var fieldIDToName_RichColumnPageRequest = map[int16]string{
	1:   "pageNum",
	2:   "pageSize",
	4:   "name",
	5:   "authorId",
	6:   "status",
	7:   "operator",
	255: "base",
}

func (p *RichColumnPageRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *RichColumnPageRequest) IsSetAuthorId() bool {
	return p.AuthorId != nil
}

func (p *RichColumnPageRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *RichColumnPageRequest) IsSetOperator() bool {
	return p.Operator != nil
}

func (p *RichColumnPageRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RichColumnPageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RichColumnPageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RichColumnPageRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNum = _field
	return nil
}
func (p *RichColumnPageRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}
func (p *RichColumnPageRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *RichColumnPageRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthorId = _field
	return nil
}
func (p *RichColumnPageRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *ColumnStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ColumnStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *RichColumnPageRequest) ReadField7(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewOperator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Operator = _field
	return nil
}
func (p *RichColumnPageRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *RichColumnPageRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RichColumnPageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RichColumnPageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RichColumnPageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RichColumnPageRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RichColumnPageRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorId() {
		if err = oprot.WriteFieldBegin("authorId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthorId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *RichColumnPageRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *RichColumnPageRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operator", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Operator.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *RichColumnPageRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RichColumnPageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RichColumnPageRequest(%+v)", *p)

}

func (p *RichColumnPageRequest) DeepEqual(ano *RichColumnPageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.AuthorId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Status) {
		return false
	}
	if !p.Field7DeepEqual(ano.Operator) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RichColumnPageRequest) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *RichColumnPageRequest) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *RichColumnPageRequest) Field4DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *RichColumnPageRequest) Field5DeepEqual(src *int64) bool {

	if p.AuthorId == src {
		return true
	} else if p.AuthorId == nil || src == nil {
		return false
	}
	if *p.AuthorId != *src {
		return false
	}
	return true
}
func (p *RichColumnPageRequest) Field6DeepEqual(src *ColumnStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *RichColumnPageRequest) Field7DeepEqual(src *sc_misc_base.Operator) bool {

	if !p.Operator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RichColumnPageRequest) Field255DeepEqual(src *sc_misc_base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RichColumnPageResponse struct {
	Data       []*RichColumnDTO         `thrift:"data,1" frugal:"1,default,list<RichColumnDTO>" json:"data"`
	Pagination *sc_misc_base.Pagination `thrift:"pagination,2" frugal:"2,default,sc_misc_base.Pagination" json:"pagination"`
	BaseResp   *sc_misc_base.BaseResp   `thrift:"baseResp,255" frugal:"255,default,sc_misc_base.BaseResp" json:"baseResp"`
}

func NewRichColumnPageResponse() *RichColumnPageResponse {
	return &RichColumnPageResponse{}
}

func (p *RichColumnPageResponse) InitDefault() {
	*p = RichColumnPageResponse{}
}

func (p *RichColumnPageResponse) GetData() (v []*RichColumnDTO) {
	return p.Data
}

var RichColumnPageResponse_Pagination_DEFAULT *sc_misc_base.Pagination

func (p *RichColumnPageResponse) GetPagination() (v *sc_misc_base.Pagination) {
	if !p.IsSetPagination() {
		return RichColumnPageResponse_Pagination_DEFAULT
	}
	return p.Pagination
}

var RichColumnPageResponse_BaseResp_DEFAULT *sc_misc_base.BaseResp

func (p *RichColumnPageResponse) GetBaseResp() (v *sc_misc_base.BaseResp) {
	if !p.IsSetBaseResp() {
		return RichColumnPageResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RichColumnPageResponse) SetData(val []*RichColumnDTO) {
	p.Data = val
}
func (p *RichColumnPageResponse) SetPagination(val *sc_misc_base.Pagination) {
	p.Pagination = val
}
func (p *RichColumnPageResponse) SetBaseResp(val *sc_misc_base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_RichColumnPageResponse = map[int16]string{
	1:   "data",
	2:   "pagination",
	255: "baseResp",
}

func (p *RichColumnPageResponse) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *RichColumnPageResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RichColumnPageResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RichColumnPageResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RichColumnPageResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*RichColumnDTO, 0, size)
	values := make([]RichColumnDTO, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *RichColumnPageResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewPagination()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Pagination = _field
	return nil
}
func (p *RichColumnPageResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RichColumnPageResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RichColumnPageResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RichColumnPageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RichColumnPageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RichColumnPageResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RichColumnPageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RichColumnPageResponse(%+v)", *p)

}

func (p *RichColumnPageResponse) DeepEqual(ano *RichColumnPageResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Pagination) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *RichColumnPageResponse) Field1DeepEqual(src []*RichColumnDTO) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *RichColumnPageResponse) Field2DeepEqual(src *sc_misc_base.Pagination) bool {

	if !p.Pagination.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RichColumnPageResponse) Field255DeepEqual(src *sc_misc_base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ColumnQueryByIdRequest struct {
	ColumnId int64              `thrift:"columnId,1" frugal:"1,default,i64" json:"columnId"`
	Base     *sc_misc_base.Base `thrift:"base,255,optional" frugal:"255,optional,sc_misc_base.Base" json:"base,omitempty"`
}

func NewColumnQueryByIdRequest() *ColumnQueryByIdRequest {
	return &ColumnQueryByIdRequest{}
}

func (p *ColumnQueryByIdRequest) InitDefault() {
	*p = ColumnQueryByIdRequest{}
}

func (p *ColumnQueryByIdRequest) GetColumnId() (v int64) {
	return p.ColumnId
}

var ColumnQueryByIdRequest_Base_DEFAULT *sc_misc_base.Base

func (p *ColumnQueryByIdRequest) GetBase() (v *sc_misc_base.Base) {
	if !p.IsSetBase() {
		return ColumnQueryByIdRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ColumnQueryByIdRequest) SetColumnId(val int64) {
	p.ColumnId = val
}
func (p *ColumnQueryByIdRequest) SetBase(val *sc_misc_base.Base) {
	p.Base = val
}

var fieldIDToName_ColumnQueryByIdRequest = map[int16]string{
	1:   "columnId",
	255: "base",
}

func (p *ColumnQueryByIdRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ColumnQueryByIdRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnQueryByIdRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnQueryByIdRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnId = _field
	return nil
}
func (p *ColumnQueryByIdRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ColumnQueryByIdRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQueryByIdRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnQueryByIdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ColumnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnQueryByIdRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ColumnQueryByIdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnQueryByIdRequest(%+v)", *p)

}

func (p *ColumnQueryByIdRequest) DeepEqual(ano *ColumnQueryByIdRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnId) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ColumnQueryByIdRequest) Field1DeepEqual(src int64) bool {

	if p.ColumnId != src {
		return false
	}
	return true
}
func (p *ColumnQueryByIdRequest) Field255DeepEqual(src *sc_misc_base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ColumnQueryByIdResponse struct {
	Data     *ColumnDTO             `thrift:"data,1" frugal:"1,default,ColumnDTO" json:"data"`
	BaseResp *sc_misc_base.BaseResp `thrift:"baseResp,255" frugal:"255,default,sc_misc_base.BaseResp" json:"baseResp"`
}

func NewColumnQueryByIdResponse() *ColumnQueryByIdResponse {
	return &ColumnQueryByIdResponse{}
}

func (p *ColumnQueryByIdResponse) InitDefault() {
	*p = ColumnQueryByIdResponse{}
}

var ColumnQueryByIdResponse_Data_DEFAULT *ColumnDTO

func (p *ColumnQueryByIdResponse) GetData() (v *ColumnDTO) {
	if !p.IsSetData() {
		return ColumnQueryByIdResponse_Data_DEFAULT
	}
	return p.Data
}

var ColumnQueryByIdResponse_BaseResp_DEFAULT *sc_misc_base.BaseResp

func (p *ColumnQueryByIdResponse) GetBaseResp() (v *sc_misc_base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ColumnQueryByIdResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ColumnQueryByIdResponse) SetData(val *ColumnDTO) {
	p.Data = val
}
func (p *ColumnQueryByIdResponse) SetBaseResp(val *sc_misc_base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ColumnQueryByIdResponse = map[int16]string{
	1:   "data",
	255: "baseResp",
}

func (p *ColumnQueryByIdResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ColumnQueryByIdResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ColumnQueryByIdResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnQueryByIdResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnQueryByIdResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewColumnDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ColumnQueryByIdResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ColumnQueryByIdResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQueryByIdResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnQueryByIdResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnQueryByIdResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ColumnQueryByIdResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnQueryByIdResponse(%+v)", *p)

}

func (p *ColumnQueryByIdResponse) DeepEqual(ano *ColumnQueryByIdResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ColumnQueryByIdResponse) Field1DeepEqual(src *ColumnDTO) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ColumnQueryByIdResponse) Field255DeepEqual(src *sc_misc_base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ColumnQueryByIdsRequest struct {
	ColumnIds []int64            `thrift:"columnIds,1" frugal:"1,default,list<i64>" json:"columnIds"`
	Base      *sc_misc_base.Base `thrift:"base,255,optional" frugal:"255,optional,sc_misc_base.Base" json:"base,omitempty"`
}

func NewColumnQueryByIdsRequest() *ColumnQueryByIdsRequest {
	return &ColumnQueryByIdsRequest{}
}

func (p *ColumnQueryByIdsRequest) InitDefault() {
	*p = ColumnQueryByIdsRequest{}
}

func (p *ColumnQueryByIdsRequest) GetColumnIds() (v []int64) {
	return p.ColumnIds
}

var ColumnQueryByIdsRequest_Base_DEFAULT *sc_misc_base.Base

func (p *ColumnQueryByIdsRequest) GetBase() (v *sc_misc_base.Base) {
	if !p.IsSetBase() {
		return ColumnQueryByIdsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ColumnQueryByIdsRequest) SetColumnIds(val []int64) {
	p.ColumnIds = val
}
func (p *ColumnQueryByIdsRequest) SetBase(val *sc_misc_base.Base) {
	p.Base = val
}

var fieldIDToName_ColumnQueryByIdsRequest = map[int16]string{
	1:   "columnIds",
	255: "base",
}

func (p *ColumnQueryByIdsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ColumnQueryByIdsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnQueryByIdsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnQueryByIdsRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnIds = _field
	return nil
}
func (p *ColumnQueryByIdsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ColumnQueryByIdsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQueryByIdsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnQueryByIdsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnIds", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ColumnIds)); err != nil {
		return err
	}
	for _, v := range p.ColumnIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnQueryByIdsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ColumnQueryByIdsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnQueryByIdsRequest(%+v)", *p)

}

func (p *ColumnQueryByIdsRequest) DeepEqual(ano *ColumnQueryByIdsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ColumnQueryByIdsRequest) Field1DeepEqual(src []int64) bool {

	if len(p.ColumnIds) != len(src) {
		return false
	}
	for i, v := range p.ColumnIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ColumnQueryByIdsRequest) Field255DeepEqual(src *sc_misc_base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ColumnQueryByIdsResponse struct {
	Data     []*ColumnDTO           `thrift:"data,1" frugal:"1,default,list<ColumnDTO>" json:"data"`
	BaseResp *sc_misc_base.BaseResp `thrift:"baseResp,255" frugal:"255,default,sc_misc_base.BaseResp" json:"baseResp"`
}

func NewColumnQueryByIdsResponse() *ColumnQueryByIdsResponse {
	return &ColumnQueryByIdsResponse{}
}

func (p *ColumnQueryByIdsResponse) InitDefault() {
	*p = ColumnQueryByIdsResponse{}
}

func (p *ColumnQueryByIdsResponse) GetData() (v []*ColumnDTO) {
	return p.Data
}

var ColumnQueryByIdsResponse_BaseResp_DEFAULT *sc_misc_base.BaseResp

func (p *ColumnQueryByIdsResponse) GetBaseResp() (v *sc_misc_base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ColumnQueryByIdsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ColumnQueryByIdsResponse) SetData(val []*ColumnDTO) {
	p.Data = val
}
func (p *ColumnQueryByIdsResponse) SetBaseResp(val *sc_misc_base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ColumnQueryByIdsResponse = map[int16]string{
	1:   "data",
	255: "baseResp",
}

func (p *ColumnQueryByIdsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ColumnQueryByIdsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnQueryByIdsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnQueryByIdsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ColumnDTO, 0, size)
	values := make([]ColumnDTO, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ColumnQueryByIdsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ColumnQueryByIdsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQueryByIdsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnQueryByIdsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnQueryByIdsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ColumnQueryByIdsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnQueryByIdsResponse(%+v)", *p)

}

func (p *ColumnQueryByIdsResponse) DeepEqual(ano *ColumnQueryByIdsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ColumnQueryByIdsResponse) Field1DeepEqual(src []*ColumnDTO) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ColumnQueryByIdsResponse) Field255DeepEqual(src *sc_misc_base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
