// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package sc_misc_api

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/eyebluecn/sc-misc-idl/kitex_gen/sc_misc_base"
)

type ColumnQuoteQueryByColumnIdRequest struct {
	ColumnId int64              `thrift:"columnId,1" frugal:"1,default,i64" json:"columnId"`
	Base     *sc_misc_base.Base `thrift:"base,255,optional" frugal:"255,optional,sc_misc_base.Base" json:"base,omitempty"`
}

func NewColumnQuoteQueryByColumnIdRequest() *ColumnQuoteQueryByColumnIdRequest {
	return &ColumnQuoteQueryByColumnIdRequest{}
}

func (p *ColumnQuoteQueryByColumnIdRequest) InitDefault() {
	*p = ColumnQuoteQueryByColumnIdRequest{}
}

func (p *ColumnQuoteQueryByColumnIdRequest) GetColumnId() (v int64) {
	return p.ColumnId
}

var ColumnQuoteQueryByColumnIdRequest_Base_DEFAULT *sc_misc_base.Base

func (p *ColumnQuoteQueryByColumnIdRequest) GetBase() (v *sc_misc_base.Base) {
	if !p.IsSetBase() {
		return ColumnQuoteQueryByColumnIdRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ColumnQuoteQueryByColumnIdRequest) SetColumnId(val int64) {
	p.ColumnId = val
}
func (p *ColumnQuoteQueryByColumnIdRequest) SetBase(val *sc_misc_base.Base) {
	p.Base = val
}

var fieldIDToName_ColumnQuoteQueryByColumnIdRequest = map[int16]string{
	1:   "columnId",
	255: "base",
}

func (p *ColumnQuoteQueryByColumnIdRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ColumnQuoteQueryByColumnIdRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnQuoteQueryByColumnIdRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnQuoteQueryByColumnIdRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnId = _field
	return nil
}
func (p *ColumnQuoteQueryByColumnIdRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ColumnQuoteQueryByColumnIdRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQuoteQueryByColumnIdRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnQuoteQueryByColumnIdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ColumnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnQuoteQueryByColumnIdRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ColumnQuoteQueryByColumnIdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnQuoteQueryByColumnIdRequest(%+v)", *p)

}

func (p *ColumnQuoteQueryByColumnIdRequest) DeepEqual(ano *ColumnQuoteQueryByColumnIdRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnId) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ColumnQuoteQueryByColumnIdRequest) Field1DeepEqual(src int64) bool {

	if p.ColumnId != src {
		return false
	}
	return true
}
func (p *ColumnQuoteQueryByColumnIdRequest) Field255DeepEqual(src *sc_misc_base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ColumnQuoteQueryByColumnIdResponse struct {
	Data     *ColumnQuoteDTO        `thrift:"data,1" frugal:"1,default,ColumnQuoteDTO" json:"data"`
	BaseResp *sc_misc_base.BaseResp `thrift:"baseResp,255" frugal:"255,default,sc_misc_base.BaseResp" json:"baseResp"`
}

func NewColumnQuoteQueryByColumnIdResponse() *ColumnQuoteQueryByColumnIdResponse {
	return &ColumnQuoteQueryByColumnIdResponse{}
}

func (p *ColumnQuoteQueryByColumnIdResponse) InitDefault() {
	*p = ColumnQuoteQueryByColumnIdResponse{}
}

var ColumnQuoteQueryByColumnIdResponse_Data_DEFAULT *ColumnQuoteDTO

func (p *ColumnQuoteQueryByColumnIdResponse) GetData() (v *ColumnQuoteDTO) {
	if !p.IsSetData() {
		return ColumnQuoteQueryByColumnIdResponse_Data_DEFAULT
	}
	return p.Data
}

var ColumnQuoteQueryByColumnIdResponse_BaseResp_DEFAULT *sc_misc_base.BaseResp

func (p *ColumnQuoteQueryByColumnIdResponse) GetBaseResp() (v *sc_misc_base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ColumnQuoteQueryByColumnIdResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ColumnQuoteQueryByColumnIdResponse) SetData(val *ColumnQuoteDTO) {
	p.Data = val
}
func (p *ColumnQuoteQueryByColumnIdResponse) SetBaseResp(val *sc_misc_base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ColumnQuoteQueryByColumnIdResponse = map[int16]string{
	1:   "data",
	255: "baseResp",
}

func (p *ColumnQuoteQueryByColumnIdResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ColumnQuoteQueryByColumnIdResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ColumnQuoteQueryByColumnIdResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnQuoteQueryByColumnIdResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnQuoteQueryByColumnIdResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewColumnQuoteDTO()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ColumnQuoteQueryByColumnIdResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := sc_misc_base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ColumnQuoteQueryByColumnIdResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnQuoteQueryByColumnIdResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnQuoteQueryByColumnIdResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ColumnQuoteQueryByColumnIdResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ColumnQuoteQueryByColumnIdResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnQuoteQueryByColumnIdResponse(%+v)", *p)

}

func (p *ColumnQuoteQueryByColumnIdResponse) DeepEqual(ano *ColumnQuoteQueryByColumnIdResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ColumnQuoteQueryByColumnIdResponse) Field1DeepEqual(src *ColumnQuoteDTO) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ColumnQuoteQueryByColumnIdResponse) Field255DeepEqual(src *sc_misc_base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
