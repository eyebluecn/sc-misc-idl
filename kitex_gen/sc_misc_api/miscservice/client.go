// Code generated by Kitex v0.9.1. DO NOT EDIT.

package miscservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	sc_misc_api "github.com/eyebluecn/sc-misc-idl/kitex_gen/sc_misc_api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ColumnOmnibus(ctx context.Context, request *sc_misc_api.ColumnOmnibusRequest, callOptions ...callopt.Option) (r *sc_misc_api.ColumnOmnibusResponse, err error)
	RichColumnPage(ctx context.Context, request *sc_misc_api.RichColumnPageRequest, callOptions ...callopt.Option) (r *sc_misc_api.RichColumnPageResponse, err error)
	ColumnQueryById(ctx context.Context, request *sc_misc_api.ColumnQueryByIdRequest, callOptions ...callopt.Option) (r *sc_misc_api.ColumnQueryByIdResponse, err error)
	EditorLogin(ctx context.Context, request *sc_misc_api.EditorLoginRequest, callOptions ...callopt.Option) (r *sc_misc_api.EditorLoginResponse, err error)
	ReaderLogin(ctx context.Context, request *sc_misc_api.ReaderLoginRequest, callOptions ...callopt.Option) (r *sc_misc_api.ReaderLoginResponse, err error)
	ReaderQueryById(ctx context.Context, request *sc_misc_api.ReaderQueryByIdRequest, callOptions ...callopt.Option) (r *sc_misc_api.ReaderQueryByIdResponse, err error)
	PaymentQueryById(ctx context.Context, request *sc_misc_api.PaymentQueryByIdRequest, callOptions ...callopt.Option) (r *sc_misc_api.PaymentQueryByIdResponse, err error)
	PaymentPrepare(ctx context.Context, request *sc_misc_api.PaymentPrepareRequest, callOptions ...callopt.Option) (r *sc_misc_api.PaymentPrepareResponse, err error)
	PaymentCreate(ctx context.Context, request *sc_misc_api.PaymentCreateRequest, callOptions ...callopt.Option) (r *sc_misc_api.PaymentCreateResponse, err error)
	PaymentPaidCallback(ctx context.Context, request *sc_misc_api.PaymentPaidCallbackRequest, callOptions ...callopt.Option) (r *sc_misc_api.PaymentPaidCallbackResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kMiscServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kMiscServiceClient struct {
	*kClient
}

func (p *kMiscServiceClient) ColumnOmnibus(ctx context.Context, request *sc_misc_api.ColumnOmnibusRequest, callOptions ...callopt.Option) (r *sc_misc_api.ColumnOmnibusResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ColumnOmnibus(ctx, request)
}

func (p *kMiscServiceClient) RichColumnPage(ctx context.Context, request *sc_misc_api.RichColumnPageRequest, callOptions ...callopt.Option) (r *sc_misc_api.RichColumnPageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RichColumnPage(ctx, request)
}

func (p *kMiscServiceClient) ColumnQueryById(ctx context.Context, request *sc_misc_api.ColumnQueryByIdRequest, callOptions ...callopt.Option) (r *sc_misc_api.ColumnQueryByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ColumnQueryById(ctx, request)
}

func (p *kMiscServiceClient) EditorLogin(ctx context.Context, request *sc_misc_api.EditorLoginRequest, callOptions ...callopt.Option) (r *sc_misc_api.EditorLoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EditorLogin(ctx, request)
}

func (p *kMiscServiceClient) ReaderLogin(ctx context.Context, request *sc_misc_api.ReaderLoginRequest, callOptions ...callopt.Option) (r *sc_misc_api.ReaderLoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ReaderLogin(ctx, request)
}

func (p *kMiscServiceClient) ReaderQueryById(ctx context.Context, request *sc_misc_api.ReaderQueryByIdRequest, callOptions ...callopt.Option) (r *sc_misc_api.ReaderQueryByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ReaderQueryById(ctx, request)
}

func (p *kMiscServiceClient) PaymentQueryById(ctx context.Context, request *sc_misc_api.PaymentQueryByIdRequest, callOptions ...callopt.Option) (r *sc_misc_api.PaymentQueryByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PaymentQueryById(ctx, request)
}

func (p *kMiscServiceClient) PaymentPrepare(ctx context.Context, request *sc_misc_api.PaymentPrepareRequest, callOptions ...callopt.Option) (r *sc_misc_api.PaymentPrepareResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PaymentPrepare(ctx, request)
}

func (p *kMiscServiceClient) PaymentCreate(ctx context.Context, request *sc_misc_api.PaymentCreateRequest, callOptions ...callopt.Option) (r *sc_misc_api.PaymentCreateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PaymentCreate(ctx, request)
}

func (p *kMiscServiceClient) PaymentPaidCallback(ctx context.Context, request *sc_misc_api.PaymentPaidCallbackRequest, callOptions ...callopt.Option) (r *sc_misc_api.PaymentPaidCallbackResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PaymentPaidCallback(ctx, request)
}
