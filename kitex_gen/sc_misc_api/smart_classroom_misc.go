// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package sc_misc_api

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type MiscService interface {
	ReaderLogin(ctx context.Context, request *ReaderLoginRequest) (r *ReaderLoginResponse, err error)

	EditorLogin(ctx context.Context, request *EditorLoginRequest) (r *EditorLoginResponse, err error)
}

type MiscServiceClient struct {
	c thrift.TClient
}

func NewMiscServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MiscServiceClient {
	return &MiscServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMiscServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MiscServiceClient {
	return &MiscServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMiscServiceClient(c thrift.TClient) *MiscServiceClient {
	return &MiscServiceClient{
		c: c,
	}
}

func (p *MiscServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MiscServiceClient) ReaderLogin(ctx context.Context, request *ReaderLoginRequest) (r *ReaderLoginResponse, err error) {
	var _args MiscServiceReaderLoginArgs
	_args.Request = request
	var _result MiscServiceReaderLoginResult
	if err = p.Client_().Call(ctx, "ReaderLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MiscServiceClient) EditorLogin(ctx context.Context, request *EditorLoginRequest) (r *EditorLoginResponse, err error) {
	var _args MiscServiceEditorLoginArgs
	_args.Request = request
	var _result MiscServiceEditorLoginResult
	if err = p.Client_().Call(ctx, "EditorLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MiscServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MiscService
}

func (p *MiscServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MiscServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MiscServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMiscServiceProcessor(handler MiscService) *MiscServiceProcessor {
	self := &MiscServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ReaderLogin", &miscServiceProcessorReaderLogin{handler: handler})
	self.AddToProcessorMap("EditorLogin", &miscServiceProcessorEditorLogin{handler: handler})
	return self
}
func (p *MiscServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type miscServiceProcessorReaderLogin struct {
	handler MiscService
}

func (p *miscServiceProcessorReaderLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceReaderLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReaderLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceReaderLoginResult{}
	var retval *ReaderLoginResponse
	if retval, err2 = p.handler.ReaderLogin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReaderLogin: "+err2.Error())
		oprot.WriteMessageBegin("ReaderLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReaderLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miscServiceProcessorEditorLogin struct {
	handler MiscService
}

func (p *miscServiceProcessorEditorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiscServiceEditorLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EditorLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MiscServiceEditorLoginResult{}
	var retval *EditorLoginResponse
	if retval, err2 = p.handler.EditorLogin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EditorLogin: "+err2.Error())
		oprot.WriteMessageBegin("EditorLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EditorLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MiscServiceReaderLoginArgs struct {
	Request *ReaderLoginRequest `thrift:"request,1" frugal:"1,default,ReaderLoginRequest" json:"request"`
}

func NewMiscServiceReaderLoginArgs() *MiscServiceReaderLoginArgs {
	return &MiscServiceReaderLoginArgs{}
}

func (p *MiscServiceReaderLoginArgs) InitDefault() {
	*p = MiscServiceReaderLoginArgs{}
}

var MiscServiceReaderLoginArgs_Request_DEFAULT *ReaderLoginRequest

func (p *MiscServiceReaderLoginArgs) GetRequest() (v *ReaderLoginRequest) {
	if !p.IsSetRequest() {
		return MiscServiceReaderLoginArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceReaderLoginArgs) SetRequest(val *ReaderLoginRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceReaderLoginArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceReaderLoginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceReaderLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceReaderLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceReaderLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewReaderLoginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceReaderLoginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReaderLogin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceReaderLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceReaderLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceReaderLoginArgs(%+v)", *p)

}

func (p *MiscServiceReaderLoginArgs) DeepEqual(ano *MiscServiceReaderLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceReaderLoginArgs) Field1DeepEqual(src *ReaderLoginRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceReaderLoginResult struct {
	Success *ReaderLoginResponse `thrift:"success,0,optional" frugal:"0,optional,ReaderLoginResponse" json:"success,omitempty"`
}

func NewMiscServiceReaderLoginResult() *MiscServiceReaderLoginResult {
	return &MiscServiceReaderLoginResult{}
}

func (p *MiscServiceReaderLoginResult) InitDefault() {
	*p = MiscServiceReaderLoginResult{}
}

var MiscServiceReaderLoginResult_Success_DEFAULT *ReaderLoginResponse

func (p *MiscServiceReaderLoginResult) GetSuccess() (v *ReaderLoginResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceReaderLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceReaderLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReaderLoginResponse)
}

var fieldIDToName_MiscServiceReaderLoginResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceReaderLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceReaderLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceReaderLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceReaderLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewReaderLoginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceReaderLoginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReaderLogin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceReaderLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceReaderLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceReaderLoginResult(%+v)", *p)

}

func (p *MiscServiceReaderLoginResult) DeepEqual(ano *MiscServiceReaderLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceReaderLoginResult) Field0DeepEqual(src *ReaderLoginResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceEditorLoginArgs struct {
	Request *EditorLoginRequest `thrift:"request,1" frugal:"1,default,EditorLoginRequest" json:"request"`
}

func NewMiscServiceEditorLoginArgs() *MiscServiceEditorLoginArgs {
	return &MiscServiceEditorLoginArgs{}
}

func (p *MiscServiceEditorLoginArgs) InitDefault() {
	*p = MiscServiceEditorLoginArgs{}
}

var MiscServiceEditorLoginArgs_Request_DEFAULT *EditorLoginRequest

func (p *MiscServiceEditorLoginArgs) GetRequest() (v *EditorLoginRequest) {
	if !p.IsSetRequest() {
		return MiscServiceEditorLoginArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MiscServiceEditorLoginArgs) SetRequest(val *EditorLoginRequest) {
	p.Request = val
}

var fieldIDToName_MiscServiceEditorLoginArgs = map[int16]string{
	1: "request",
}

func (p *MiscServiceEditorLoginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MiscServiceEditorLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceEditorLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceEditorLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEditorLoginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *MiscServiceEditorLoginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditorLogin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceEditorLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MiscServiceEditorLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceEditorLoginArgs(%+v)", *p)

}

func (p *MiscServiceEditorLoginArgs) DeepEqual(ano *MiscServiceEditorLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *MiscServiceEditorLoginArgs) Field1DeepEqual(src *EditorLoginRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type MiscServiceEditorLoginResult struct {
	Success *EditorLoginResponse `thrift:"success,0,optional" frugal:"0,optional,EditorLoginResponse" json:"success,omitempty"`
}

func NewMiscServiceEditorLoginResult() *MiscServiceEditorLoginResult {
	return &MiscServiceEditorLoginResult{}
}

func (p *MiscServiceEditorLoginResult) InitDefault() {
	*p = MiscServiceEditorLoginResult{}
}

var MiscServiceEditorLoginResult_Success_DEFAULT *EditorLoginResponse

func (p *MiscServiceEditorLoginResult) GetSuccess() (v *EditorLoginResponse) {
	if !p.IsSetSuccess() {
		return MiscServiceEditorLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MiscServiceEditorLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*EditorLoginResponse)
}

var fieldIDToName_MiscServiceEditorLoginResult = map[int16]string{
	0: "success",
}

func (p *MiscServiceEditorLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiscServiceEditorLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MiscServiceEditorLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MiscServiceEditorLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewEditorLoginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MiscServiceEditorLoginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditorLogin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MiscServiceEditorLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MiscServiceEditorLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiscServiceEditorLoginResult(%+v)", *p)

}

func (p *MiscServiceEditorLoginResult) DeepEqual(ano *MiscServiceEditorLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MiscServiceEditorLoginResult) Field0DeepEqual(src *EditorLoginResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
